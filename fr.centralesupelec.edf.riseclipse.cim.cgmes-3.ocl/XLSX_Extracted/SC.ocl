/*
*************************************************************************
**  This file is part of the RiseClipse tool
**
**  The content of this file is based on data available on the ENTSO-E
**  web site (https://www.entsoe.eu/digital/cim/cim-conformity-and-interoperability/)
**
**  This file is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY
**  
**  Contributors:
**      Computer Science Department, CentraleSup√©lec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import cim : 'http://iec.ch/TC57/CIM100'
import md : 'http://iec.ch/TC57/61970-552/ModelDescription/1'

import '../Helpers/CheckProfile.ocl'


package cim


context MutualCoupling
--docReference non-QoCDC Key=0668b544-ecc6-45e5-9fe9-cd93396d4d40 Profile=SC
--message Length datatype defines that: It shall be a positive value or zero.
    inv SC_MutualCoupling_lengthValueRange
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/MutualCoupling_lengthValueRange;'
          + '0;'
          + self.ID + ': Length datatype defines that: It shall be a positive value or zero.'
        )
    :
        self.isInShortCircuitProfile() implies (
            ( self.distance11 <> null implies self.distance11 >= 0 ) and
            ( self.distance12 <> null implies self.distance12 >= 0 ) and
            ( self.distance21 <> null implies self.distance21 >= 0 ) and
            ( self.distance22 <> null implies self.distance22 >= 0 )
        )

context PetersenCoil
--docReference non-QoCDC Key=f893ad5a-24e1-4332-a6f9-a1c101d2b385 Profile=SC
--message This is normally a fixed amount for which the controller is configured and could be positive or negative.  Typically 0 to 60 A depending on voltage and resonance conditions.
    inv SC_PetersenCoil_offsetCurrent_valueRangeTypical
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/PetersenCoil_offsetCurrent_valueRangeTypical;'
          + '0;'
          + self.ID + ': This is normally a fixed amount for which the controller is configured and could be positive or negative.  Typically 0 to 60 A depending on voltage and resonance conditions.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.offsetCurrent <> null implies self.offsetCurrent >= 0.0 and self.offsetCurrent <  60.0
        )

--docReference non-QoCDC Key=7088c045-4c5f-46bc-a1b0-f8ebe014acae Profile=SC
--message Typically in the range of 20 mA to 200 mA.
    inv SC_PetersenCoil_positionCurrent_valueRangeTypical
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/PetersenCoil_positionCurrent_valueRangeTypical;'
          + '0;'
          + self.ID + ': Typically in the range of 20 mA to 200 mA.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.positionCurrent <> null implies self.positionCurrent >= 0.02 and self.positionCurrent <=  0.2
        )

context PowerTransformerEnd
def : EQ_BRANCH_X_LIMIT : Real = 0.01
--docReference non-QoCDC Key=9f5aa0de-9646-466d-a0de-21e9e2060352 Profile=SC
--message The valid values are 0 to 11.
    inv SC_PowerTransformerEnd_phaseAngleClock_valueRange
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/PowerTransformerEnd_phaseAngleClock_valueRange;'
          + '0;'
          + self.ID + ': The valid values are 0 to 11.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.phaseAngleClock <> null implies self.phaseAngleClock >= 0.0 and self.phaseAngleClock <=  11.0
        )

context SeriesCompensator
--docReference non-QoCDC Key=4ec6101a-c969-4098-9981-25e2c5539535 Profile=SC
--message It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent is true.
    inv SC_SeriesCompensator_varistorRatedCurrent_usage
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SeriesCompensator_varistorRatedCurrent_usage;'
          + '0;'
          + self.ID + ': It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent is true.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.varistorRatedCurrent <> null implies self.varistorPresent = true
        )

--docReference non-QoCDC Key=1699c71e-71c4-4a3e-b5fa-fa49950eda4c Profile=SC
--message The attribute shall be a positive value.
    inv SC_SeriesCompensator_varistorRatedCurrent_valueRange
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SeriesCompensator_varistorRatedCurrent_valueRange;'
          + '0;'
          + self.ID + ': The attribute shall be a positive value.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.varistorRatedCurrent <> null implies self.varistorRatedCurrent >  0.0
        )

--docReference non-QoCDC Key=a0090429-ab65-4d8d-8a14-f92dddefd87b Profile=SC
--message It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent is true.
    inv SC_SeriesCompensator_varistorVoltageThreshold_usage
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SeriesCompensator_varistorVoltageThreshold_usage;'
          + '0;'
          + self.ID + ': It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent is true.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.varistorVoltageThreshold <> null implies self.varistorPresent = true
        )

--docReference non-QoCDC Key=02721364-9813-4faa-b8d3-131b24968a33 Profile=SC
--message The SeriesCompensator.varistorRatedCurrent is requited if SeriesCompensator.varistorPresent is true.
    inv SC_SeriesCompensator_varistorRatedCurrent_required
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SeriesCompensator_varistorRatedCurrent_required;'
          + '0;'
          + self.ID + ': The SeriesCompensator.varistorRatedCurrent is requited if SeriesCompensator.varistorPresent is true.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.varistorPresent <> null implies (
                self.varistorPresent = true implies self.varistorRatedCurrent <> null
            )
        )

--docReference non-QoCDC Key=5d8b7f19-ada4-4024-9db2-7d6b24a174b7 Profile=SC
--message The SeriesCompensator.varistorVoltageThreshold is requited if SeriesCompensator.varistorPresent is true.
    inv SC_SeriesCompensator_varistorVoltageThreshold_required
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SeriesCompensator_varistorVoltageThreshold_required;'
          + '0;'
          + self.ID + ': The SeriesCompensator.varistorVoltageThreshold is requited if SeriesCompensator.varistorPresent is true.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.varistorPresent <> null implies (
                self.varistorPresent = true implies self.varistorVoltageThreshold <> null
            )
        )

context SynchronousMachine
def : SSH_SV_TOT_P_DIFF : Real = 200
--docReference non-QoCDC Key=dd0f996e-3611-445b-b710-d61428f0d737 Profile=SC
--message If SynchronousMachine.earthing is true, then SynchronousMachine.earthingStarPointR and SynchronousMachine.earthingStarPointX are required.
    inv SC_SynchronousMachine_attributes
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/SynchronousMachine_attributes;'
          + '0;'
          + self.ID + ': If SynchronousMachine.earthing is true, then SynchronousMachine.earthingStarPointR and SynchronousMachine.earthingStarPointX are required.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.earthing = true implies
                self.earthingStarPointR <> null and self.earthingStarPointX <> null
        )

context TransformerEnd
--docReference non-QoCDC Key=f781567b-82d1-4106-88e5-70e933263b79 Profile=SC
--message If TransformerEnd.grounded is true, then TransformerEnd.rground and TransformerEnd.xground are required.
    inv SC_TransformerEnd_grounding
        (   'ERROR;'
          + 'OCL/XLSX_Extracted/SC/TransformerEnd_grounding;'
          + '0;'
          + self.ID + ': If TransformerEnd.grounded is true, then TransformerEnd.rground and TransformerEnd.xground are required.'
        )
    :
        self.isInShortCircuitProfile() implies (
            self.grounded = true implies
                self.rground <> null and self.xground <> null
        )

endpackage
